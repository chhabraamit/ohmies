package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"
)

var walletAddress = "0x18E6f43E3f02ae5C896D568AbB1D0d7050eE9c5b"

func main() {
	walletAddress = os.Args[1]
	fmt.Printf("walletAddress: %v\n", walletAddress)

	sOhm := getSOhm()
	fmt.Printf("currentOhms: %v\n", sOhm)

	ohmPrice := getOhmPrice()
	fmt.Printf("ohmPrice: %v\n", ohmPrice)

	stakedOhms, startingDate := getStakedOhms()
	fmt.Printf("investedOhms: %v\n", stakedOhms)

	ohmGain := sOhm - stakedOhms
	fmt.Printf("gain in ohm: %v\n", ohmGain)

	gains := ohmGain * ohmPrice
	fmt.Printf("gain in USD: %v\n", gains)

	fmt.Println()

	fmt.Printf("started at: %v\n", startingDate)

	now := time.Now()
	days := int(now.Sub(startingDate).Hours()) / (24)
	fmt.Printf("total days staked: %v\n", days)
	fmt.Printf("per day gain (in USD): %v\n", gains/(float64(days)))

	//ohmPrice := "https://api.coingecko.com/api/v3/simple/price?ids=Olympus&vs_currencies=USD"
	//getResponse()
}

func getStakedOhms() (float64, time.Time) {
	url := "https://api.etherscan.io/api?module=account&action=tokentx&contractaddress=0x383518188c0c6d7730d91b2c03a03c837814a899&address=" + walletAddress + "&page=1&offset=100&sort=asc&apikey=1PZ9CGXZPQ1PT1SVM5V8KY9NAGJA3YJB93"
	//fmt.Printf("url for stakedOhms: %v\n",url)
	type AutoGenerated struct {
		Status  string `json:"status"`
		Message string `json:"message"`
		Result  []struct {
			BlockNumber       string `json:"blockNumber"`
			TimeStamp         string `json:"timeStamp"`
			Hash              string `json:"hash"`
			Nonce             string `json:"nonce"`
			BlockHash         string `json:"blockHash"`
			From              string `json:"from"`
			ContractAddress   string `json:"contractAddress"`
			To                string `json:"to"`
			Value             string `json:"value"`
			TokenName         string `json:"tokenName"`
			TokenSymbol       string `json:"tokenSymbol"`
			TokenDecimal      string `json:"tokenDecimal"`
			TransactionIndex  string `json:"transactionIndex"`
			Gas               string `json:"gas"`
			GasPrice          string `json:"gasPrice"`
			GasUsed           string `json:"gasUsed"`
			CumulativeGasUsed string `json:"cumulativeGasUsed"`
			Input             string `json:"input"`
			Confirmations     string `json:"confirmations"`
		} `json:"result"`
	}
	v := AutoGenerated{}

	err, body := getBytes(url)

	//fmt.Printf("string: %v\n", string(body))
	err = json.Unmarshal(body, &v)
	if err != nil {
		log.Fatalln(err)
	}
	ans := 0.0
	startingDate := time.Now()
	getValue := func(str string) float64 {
		a, err := strconv.Atoi(str)
		if err != nil {
			log.Fatal(err)
		}
		ans := float64(a)
		i := 1000000000.0
		ans = ans / (1.0 * i)
		return ans
	}
	for _, txn := range v.Result {
		if strings.ToLower(txn.To) == strings.ToLower(walletAddress) {
			ans += getValue(txn.Value)
			curr := getTime(txn.TimeStamp)
			if curr.Before(startingDate) {
				startingDate = curr
			}
		}
	}
	return ans, startingDate
}

func getTime(stamp string) time.Time {
	i, err := strconv.Atoi(stamp)
	if err != nil {
		log.Fatal(err)
	}
	ts := time.Unix(int64(i), 0)
	parse, err := time.Parse("2006-01-02", ts.String()[0:len("2021-10-16")])
	if err != nil {
		log.Fatal(err)
	}
	//fmt.Printf("time: %v\n", parse)
	return parse
}

func getOhmPrice() float64 {
	url := "https://api.coingecko.com/api/v3/simple/price?ids=Olympus&vs_currencies=USD"
	v := struct {
		//{"olympus":{"usd":1037.62}}
		Olympus struct {
			USD float64 `json:"usd"`
		} `json:"olympus"`
	}{}

	err, body := getBytes(url)

	//fmt.Printf("string: %v\n", string(body))
	err = json.Unmarshal(body, &v)
	if err != nil {
		log.Fatalln(err)
	}
	//Convert the body to type string
	return v.Olympus.USD
}

func getSOhm() float64 {
	sOhmUrl := "https://api.etherscan.io/api?module=account&action=tokenbalance&contractaddress=0x04f2694c8fcee23e8fd0dfea1d4f5bb8c352111f&address=" + walletAddress + "&tag=latest&apikey=1PZ9CGXZPQ1PT1SVM5V8KY9NAGJA3YJB93"
	v := struct {
		Result string `json:"result"`
	}{}

	err, body := getBytes(sOhmUrl)

	//fmt.Printf("string: %v\n", string(body))
	err = json.Unmarshal(body, &v)
	if err != nil {
		log.Fatalln(err)
	}
	//Convert the body to type string
	a, err := strconv.Atoi(v.Result)
	if err != nil {
		log.Fatal(err)
	}
	ans := float64(a)
	i := 1000000000.0
	ans = ans / (1.0 * i)
	return ans
}

func getBytes(url string) (error, []byte) {
	resp, err := http.Get(url)
	if err != nil {
		log.Fatalln(err)
	}
	//We Read the response body on the line below.
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}
	return err, body
}
